Juan Zamudio
Mengzhe Li
September 23, 2016
Lab02: Debugger

Problem 1

1)
	There is a Segmentation Fault (Signal: SIGSEGV) that occurs if we continue past the breakpoint.

2)
	frame 0 - strtol_l.c:297
	frame 1 - strtol.c:109
	frame 2 - atoi.c:27
	frame 3 - problem1.c:17

3) 
	No (nptr = <optimized out>)

4) 
	0x0 - NULL pointer

5) 
	-1835

6)
	argc = 2
	argv[] = {"/mnt/home/jzamudio/Desktop/cs105/problem1", "5"}
	The elements of argv[] came from the commands that were passed on the command line. The first element is the program name (given by program path) and the second element came from the argument passed to run, which was 5. Thus, that is why argc has a value of 2.

7) 
	a) atoi.c:26 
	b) problem1.c:5

8)
	a) Lines 1-10 of the source code
	b) The rest of the source code (11-19)

9)
	The return key runs the program step by step like an instruction counter.

10)
	result = 10
	a = 5
	b = 16

11)
	a) Lines 6, 5, 8, 9
	b) The debugger is showing us these lines in this order because the compiler is reorganizing the lines for optimization, so they're not in the same order as the source code, although switching the order of lines 5 and 6 actually doesn't matter.

12)
	 The program stops at the call to loop_while in main (problem1.c:17)

13)
	a) 0x00000000004004ca
	b) 0x00000000004004f7

14)
	There is no call to loop_while.

15)
	a) print/x 42 prints the hexadecimal number from a decimal number 42 (print/x 42 = 0x2a)
	b) p 0x2f prints the decimal number 47 from a hexadecimal number 0x2f (p 0x2f = 47)

16)
	The constant in the sub comes from the int value of parameter b, which is 16

17)
	Since main was optimized, the call to loop_while happens inside the main function.

19) 
	result = -1580
	There were no out-of-order execution as a result of optimization

Problem 2

1)
	1078530011

2)
	0x40490fdb. Yes, it is edifying.

3)	
	The output is the result of (2) split into its four different byte components. In other words, the output is the result of splitting 0x40490fdb into four two-byte segments.

4)
	x/fw &puzzle1 = 3.14159274

5)
	It is not correct. It is wrong because the last two digits of puzzle1 are different from the correct value of pi.

6)
	The human friendly value of puzzle2 is 2.7182818284590451 ~ e

7)
	Yes, because it is suppose to be an array of ints, but it turns out to be an rational number.

8)
	No, it is not correct. It is almost correct, but the last digit is not different from the actual value of e.

9)
	The string “Was that really so hard?” is stored in puzzle3.

10)
	No, you don’t need a print statement because gdb already prints out a value for a_size at the breakpoint.

11)
	a = 0x602010

12)
	Line 24 last displayed a.

13)
	The value of a is now 0x602014 and the value of i is 1.

14)
	We end up at the beginning of the for-loop on line 23.

15)
	a is now 0x602018.

16)
	We get 1.

17)
	We end up at line 24.

18)
	a is now 0x602030.

19)
	p *a = 21

Problem 3

1)
	The output is: 1 47 2 42 3

2)
	The program stops at line 29.

3)
	The program stops at line 35.

4)
	No. It takes us to the end of the program and returns the result that we got in (1).

5)
	This assembly code corresponds to the initialization of i to 1 in the for statement.

6)
	It tells us that we’re at line 36 in the source code.

7)
	The full contents of the array are: {0, 1, 42, 2, 47, 0}

8)
	We stop at the third breakpoint which is at line 36.

9)
	The registers that have not be covered in class are rcx, eflags, ds, es, fs, gs.

*10)
	The flags that are currently set that we have discusses in class is just the ZF. 

11)
	The value of $r8 = 140737351872352. The value obtained from “p/x $r8” (0x7ffff7dd6f60) is not that meaningful. The relationship between the values printed for $r8d is that the least significant four bytes of $r8 are printed in hex and dec.

12)
	The difference is that x/16i $rip stops at fix_array+39 while the other finishes the fix_array program. However, what we see after pressing enter again is the continuation from fix_array to the main function.

13)
	We are at line 23.

14)
	The instruction address 0x000000000040065c, line 24, is going to be executed next.

15)
	The next instruction for stepi is line 11. The next instruction for nexti is 0x0000000000400661, line 24. 

16)
	The source line listed is problem2.c:26.

17)
	